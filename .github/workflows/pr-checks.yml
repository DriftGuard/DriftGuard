name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  # Automated PR labeling and assignment
  pr-automation:
    name: PR Automation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Auto-assign and request reviewers for PR
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Auto-assign the PR to code owners based on changed files
              const changedFiles = context.payload.pull_request.files.map(file => file.filename);
              
              // Determine assignees and reviewers based on file patterns
              const assignees = new Set();
              const reviewers = new Set();
              
              // Check for ML/AI files
              const hasMLFiles = changedFiles.some(file => 
                file.startsWith('ai/') || file.endsWith('.py') || file.includes('requirements.txt') ||
                file.includes('model') || file.includes('ml') || file.includes('neural') ||
                file.includes('tensorflow') || file.includes('pytorch') || file.includes('sklearn')
              );
              
              // Check for frontend files
              const hasFrontendFiles = changedFiles.some(file => 
                file.startsWith('web/') || file.endsWith('.js') || file.endsWith('.ts') || 
                file.endsWith('.jsx') || file.endsWith('.tsx') || file.includes('package.json') ||
                file.includes('react') || file.includes('vue') || file.includes('angular') ||
                file.includes('css') || file.includes('scss') || file.includes('sass')
              );
              
              // Check for backend files
              const hasBackendFiles = changedFiles.some(file => 
                file.endsWith('.go') || file.startsWith('cmd/') || file.startsWith('internal/') || 
                file.startsWith('pkg/') || file.includes('main.go') || file.includes('server')
              );
              
              // Check for infrastructure/devops files
              const hasInfraFiles = changedFiles.some(file => 
                file.endsWith('.yaml') || file.endsWith('.yml') || file.includes('Dockerfile') ||
                file.includes('docker-compose') || file.startsWith('deploy/') || file.startsWith('helm/') ||
                file.includes('kubernetes') || file.includes('k8s') || file.includes('terraform') ||
                file.includes('.github/workflows') || file.includes('ci/') || file.includes('cd/')
              );
              
              // Check for documentation files
              const hasDocFiles = changedFiles.some(file => 
                file.endsWith('.md') || file.startsWith('docs/') || file.includes('README') ||
                file.includes('CONTRIBUTING') || file.includes('LICENSE')
              );
              
              // Assign and request reviewers based on file types
              if (hasMLFiles) {
                assignees.add('Shrey327');
                reviewers.add('Shrey327');
              }
              if (hasFrontendFiles) {
                assignees.add('Shrey327');
                reviewers.add('Shrey327');
              }
              if (hasBackendFiles) {
                assignees.add('Arpit529Srivastava');
                reviewers.add('Arpit529Srivastava');
              }
              if (hasInfraFiles) {
                assignees.add('Arpit529Srivastava');
                reviewers.add('Arpit529Srivastava');
              }
              if (hasDocFiles) {
                assignees.add('Arpit529Srivastava');
                reviewers.add('Arpit529Srivastava');
              }
              
              // Default assignee if no specific files detected
              if (assignees.size === 0) {
                assignees.add('Arpit529Srivastava');
                reviewers.add('Arpit529Srivastava');
              }
              
              // Add assignees
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                assignees: Array.from(assignees)
              });
              
              // Request reviewers
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: Array.from(reviewers)
              });
              
              console.log(`Assigned PR to: ${Array.from(assignees).join(', ')}`);
              console.log(`Requested reviewers: ${Array.from(reviewers).join(', ')}`);
            } catch (error) {
              console.log('Could not assign PR or request reviewers automatically:', error.message);
              // Don't fail the workflow for assignment issues
            }

      - name: Auto-label PR
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const fs = require('fs');
              const path = require('path');
              
              // Get changed files
              const changedFiles = context.payload.pull_request.files.map(file => file.filename);
              
              // Define enhanced label rules based on file patterns
              const labelRules = [
                // Language-specific labels
                { pattern: /\.go$/, label: 'go' },
                { pattern: /\.py$/, label: 'python' },
                { pattern: /\.(js|jsx|ts|tsx)$/, label: 'frontend' },
                { pattern: /\.(yaml|yml)$/, label: 'infrastructure' },
                { pattern: /Dockerfile/, label: 'docker' },
                { pattern: /\.md$/, label: 'documentation' },
                
                // Directory-based labels
                { pattern: /\.github\/workflows/, label: 'ci-cd' },
                { pattern: /deploy\//, label: 'deployment' },
                { pattern: /ai\//, label: 'ml' },
                { pattern: /web\//, label: 'frontend' },
                { pattern: /cmd\//, label: 'backend' },
                { pattern: /internal\//, label: 'backend' },
                { pattern: /pkg\//, label: 'backend' },
                { pattern: /helm\//, label: 'devops' },
                { pattern: /kubernetes\//, label: 'devops' },
                { pattern: /terraform\//, label: 'devops' },
                { pattern: /ci\//, label: 'ci-cd' },
                { pattern: /cd\//, label: 'ci-cd' },
                
                // Content-based labels
                { pattern: /model/, label: 'ml' },
                { pattern: /neural/, label: 'ml' },
                { pattern: /tensorflow/, label: 'ml' },
                { pattern: /pytorch/, label: 'ml' },
                { pattern: /sklearn/, label: 'ml' },
                { pattern: /react/, label: 'frontend' },
                { pattern: /vue/, label: 'frontend' },
                { pattern: /angular/, label: 'frontend' },
                { pattern: /css/, label: 'frontend' },
                { pattern: /scss/, label: 'frontend' },
                { pattern: /sass/, label: 'frontend' },
                { pattern: /server/, label: 'backend' },
                { pattern: /api/, label: 'backend' },
                { pattern: /kubernetes/, label: 'devops' },
                { pattern: /k8s/, label: 'devops' },
                { pattern: /terraform/, label: 'devops' },
                { pattern: /docker-compose/, label: 'docker' },
                { pattern: /requirements\.txt/, label: 'python' },
                { pattern: /package\.json/, label: 'frontend' },
                { pattern: /go\.mod/, label: 'go' },
                { pattern: /go\.sum/, label: 'go' },
                { pattern: /README/, label: 'documentation' },
                { pattern: /CONTRIBUTING/, label: 'documentation' },
                { pattern: /LICENSE/, label: 'documentation' }
              ];
              
              // Determine labels to add
              const labelsToAdd = new Set();
              
              for (const file of changedFiles) {
                for (const rule of labelRules) {
                  if (rule.pattern.test(file)) {
                    labelsToAdd.add(rule.label);
                  }
                }
              }
              
              // Add category labels based on file types
              const hasMLFiles = changedFiles.some(file => 
                file.startsWith('ai/') || file.endsWith('.py') || file.includes('requirements.txt') ||
                file.includes('model') || file.includes('ml') || file.includes('neural') ||
                file.includes('tensorflow') || file.includes('pytorch') || file.includes('sklearn')
              );
              
              const hasFrontendFiles = changedFiles.some(file => 
                file.startsWith('web/') || file.endsWith('.js') || file.endsWith('.ts') || 
                file.endsWith('.jsx') || file.endsWith('.tsx') || file.includes('package.json') ||
                file.includes('react') || file.includes('vue') || file.includes('angular') ||
                file.includes('css') || file.includes('scss') || file.includes('sass')
              );
              
              const hasBackendFiles = changedFiles.some(file => 
                file.endsWith('.go') || file.startsWith('cmd/') || file.startsWith('internal/') || 
                file.startsWith('pkg/') || file.includes('main.go') || file.includes('server')
              );
              
              const hasInfraFiles = changedFiles.some(file => 
                file.endsWith('.yaml') || file.endsWith('.yml') || file.includes('Dockerfile') ||
                file.includes('docker-compose') || file.startsWith('deploy/') || file.startsWith('helm/') ||
                file.includes('kubernetes') || file.includes('k8s') || file.includes('terraform') ||
                file.includes('.github/workflows') || file.includes('ci/') || file.includes('cd/')
              );
              
              // Add category labels
              if (hasMLFiles) {
                labelsToAdd.add('ml');
              }
              if (hasFrontendFiles) {
                labelsToAdd.add('frontend');
              }
              if (hasBackendFiles) {
                labelsToAdd.add('backend');
              }
              if (hasInfraFiles) {
                labelsToAdd.add('devops');
                labelsToAdd.add('infra');
              }
              
              // Add size label based on PR size
              const additions = context.payload.pull_request.additions;
              const deletions = context.payload.pull_request.deletions;
              const totalChanges = additions + deletions;
              
              if (totalChanges <= 10) {
                labelsToAdd.add('size/XS');
              } else if (totalChanges <= 30) {
                labelsToAdd.add('size/S');
              } else if (totalChanges <= 100) {
                labelsToAdd.add('size/M');
              } else if (totalChanges <= 500) {
                labelsToAdd.add('size/L');
              } else {
                labelsToAdd.add('size/XL');
              }
              
              // Add labels
              if (labelsToAdd.size > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: Array.from(labelsToAdd)
                });
              }
              
              console.log(`Added labels: ${Array.from(labelsToAdd).join(', ')}`);
            } catch (error) {
              console.log('Could not add labels automatically:', error.message);
              // Don't fail the workflow for labeling issues
            }

  # Check PR description and template
  pr-template-check:
    name: PR Template Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const pr = context.payload.pull_request;
              const description = pr.body || '';
              
              // Check if description is too short
              if (description.length < 50) {
                core.setFailed('PR description is too short. Please provide a detailed description of your changes.');
              }
              
              // Check for required sections
              const requiredSections = ['## Description', '## Type of Change', '## Testing'];
              const missingSections = requiredSections.filter(section => !description.includes(section));
              
              if (missingSections.length > 0) {
                core.setFailed(`PR description is missing required sections: ${missingSections.join(', ')}`);
              }
              
              console.log('PR description check passed');
            } catch (error) {
              console.log('Could not check PR description:', error.message);
              // Don't fail the workflow for description check issues
            }

  # Check for breaking changes
  breaking-changes-check:
    name: Breaking Changes Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check for breaking changes
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const pr = context.payload.pull_request;
              const description = pr.body || '';
              const title = pr.title || '';
              
              // Check if PR is marked as breaking change
              const isBreakingChange = description.includes('[x] Breaking change') || 
                                     title.includes('[BREAKING]') ||
                                     title.includes('breaking');
              
              if (isBreakingChange) {
                // Add breaking change label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['breaking-change']
                });
                
                // Check if breaking changes are properly documented
                if (!description.includes('## Breaking Changes')) {
                  core.setFailed('Breaking changes must be documented in the PR description under "## Breaking Changes" section');
                }
              }
            } catch (error) {
              console.log('Could not check for breaking changes:', error.message);
              // Don't fail the workflow for breaking changes check issues
            }

  # Check commit message format
  commit-message-check:
    name: Commit Message Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check commit messages
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data: commits } = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              
              const conventionalCommitPattern = /^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+/;
              
              for (const commit of commits) {
                const message = commit.commit.message;
                if (!conventionalCommitPattern.test(message)) {
                  core.setFailed(`Commit message "${message}" does not follow conventional commit format`);
                }
              }
              
              console.log('All commit messages follow conventional commit format');
            } catch (error) {
              console.log('Could not check commit messages:', error.message);
              // Don't fail the workflow for commit message check issues
              // This might happen due to permission issues or API rate limits
            } 